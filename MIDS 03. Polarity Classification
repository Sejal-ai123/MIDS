''' Install necessary libraries 

!pip install pandas
!pip install scikit-learn
!pip install numpy

'''

###### Import necessary libraries ######
import pandas as pd

###### Load Data ######
# Train Data
trainData = pd.read_csv(r"C:\Users\RATHO\Downloads\MIDS Dataset\train.csv")
# Test Data
testData = pd.read_csv(r"C:\Users\RATHO\Downloads\MIDS Dataset\test.csv")

###### Shuffle and sample the dataset ######
trainData.sample(frac=1).head(5)  # shuffle the df and pick first 5

###### Feature Extraction using TfidfVectorizer ######
from sklearn.feature_extraction.text import TfidfVectorizer

# Create feature vectors
vectorizer = TfidfVectorizer(min_df=5,
                             max_df=0.8,
                             sublinear_tf=True,
                             use_idf=True)

train_vectors = vectorizer.fit_transform(trainData['Content'])
test_vectors = vectorizer.transform(testData['Content'])

###### Perform classification with SVM ######
import time
from sklearn import svm
from sklearn.metrics import classification_report

# Perform classification with SVM, kernel=linear
classifier_linear = svm.SVC(kernel='linear')
t0 = time.time()
classifier_linear.fit(train_vectors, trainData['Label'])
t1 = time.time()
prediction_linear = classifier_linear.predict(test_vectors)
t2 = time.time()

# Time taken for training and prediction
time_linear_train = t1 - t0
time_linear_predict = t2 - t1

###### Results ######
# Display training and prediction times
print("Training time: %fs; Prediction time: %fs" % (time_linear_train, time_linear_predict))

# Classification report
report = classification_report(testData['Label'], prediction_linear, output_dict=True)

# Display positive and negative label details
print('Positive: ', report['pos'])
print('Negative: ', report['neg'])
