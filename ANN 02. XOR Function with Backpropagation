import numpy as np
import matplotlib.pyplot as plt

# Sigmoid Activation Function
def sigmoid(z):
    return 1 / (1 + np.exp(-z))

# Initialize Neural Network Parameters
def initialize_parameters(input_features, hidden_neurons, output_features):
    np.random.seed(1)
    W1 = np.random.randn(hidden_neurons, input_features) * 0.01
    b1 = np.zeros((hidden_neurons, 1))
    W2 = np.random.randn(output_features, hidden_neurons) * 0.01
    b2 = np.zeros((output_features, 1))
    
    return {"W1": W1, "b1": b1, "W2": W2, "b2": b2}

# Forward Propagation
def forward_propagation(X, parameters):
    W1, b1, W2, b2 = parameters["W1"], parameters["b1"], parameters["W2"], parameters["b2"]
    
    Z1 = np.dot(W1, X) + b1
    A1 = sigmoid(Z1)
    Z2 = np.dot(W2, A1) + b2
    A2 = sigmoid(Z2)
    
    cache = {"Z1": Z1, "A1": A1, "Z2": Z2, "A2": A2}
    return A2, cache

# Backward Propagation
def backward_propagation(X, Y, parameters, cache):
    m = X.shape[1]
    W2 = parameters["W2"]
    
    dZ2 = cache["A2"] - Y
    dW2 = np.dot(dZ2, cache["A1"].T) / m
    db2 = np.sum(dZ2, axis=1, keepdims=True) / m
    dA1 = np.dot(W2.T, dZ2)
    dZ1 = dA1 * cache["A1"] * (1 - cache["A1"])
    dW1 = np.dot(dZ1, X.T) / m
    db1 = np.sum(dZ1, axis=1, keepdims=True) / m
    
    gradients = {"dW1": dW1, "db1": db1, "dW2": dW2, "db2": db2}
    return gradients

# Update Parameters
def update_parameters(parameters, gradients, learning_rate):
    for key in parameters:
        parameters[key] -= learning_rate * gradients["d" + key]
    return parameters

# Training Model
def train(X, Y, hidden_neurons=2, learning_rate=0.1, epochs=10000):
    input_features = X.shape[0]
    output_features = Y.shape[0]
    parameters = initialize_parameters(input_features, hidden_neurons, output_features)
    losses = []
    
    for i in range(epochs):
        A2, cache = forward_propagation(X, parameters)
        cost = -np.mean(Y * np.log(A2) + (1 - Y) * np.log(1 - A2))
        gradients = backward_propagation(X, Y, parameters, cache)
        parameters = update_parameters(parameters, gradients, learning_rate)
        
        if i % 1000 == 0:
            losses.append(cost)
            print(f"Epoch {i}: Loss {cost}")
    
    plt.plot(losses)
    plt.xlabel("Epochs (x1000)")
    plt.ylabel("Loss")
    plt.show()
    
    return parameters

# XOR Data
X = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])  # Input
Y = np.array([[0, 1, 1, 0]])  # Output

# Train the Model
trained_parameters = train(X, Y)

# Test the Model
A2, _ = forward_propagation(X, trained_parameters)
predictions = (A2 > 0.5).astype(int)
print("Predictions:", predictions)
